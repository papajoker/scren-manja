#!/usr/bin/bash
##package description via arch repos or aur
# depend : xorg-xdpyinfo screenfetch

pkgname=screen-manja
version=0.1.0

#general install directories
declare -A DIRS=()

logo=(
"██████████████  ██████"
"██████████████  ██████"
"██████████████  ██████"
"██████████████  ██████"
"██████          ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"██████  ██████  ██████"
"                      "
"                      "
"                      "
"                      "
"                      "
)

color='green'
declare -Ar colors=(
    [green]='\033[0m\033[32m'
    [light green]='\033[0m\033[1;32m'
    [white]='\033[0m\033[1;37m'
    [red]='\033[0m\033[31m'
    [light red]='\033[0m\033[1;31m'
    [blue]='\033[0m\033[34m'
    [yellow]='\033[0m\033[1;33m'
    [purple]='\033[0m\033[35m'
    [cyan]='\033[0m\033[36m'
    [brown]='\033[0m\033[33m'
    [null]='\033[0m'
)

declare -A functions=( 
    [kernel]='kernel: '
    [uptime]='Uptime: '
    [host]=''
    [manjaro]=''
    [branch]='Branche: '
    [packages]='Paquets: '
    [maj]='A mettre à jour: '
    [de]='DE: '
    [wm]='WM: '
    [mem]='RAM: ' 
    [cpu]='CPU: '
    [gpu]='GPU: '
    [resolution]='Resolution: '
    [theme]='Theme: '
    [gtk]='Gtk: '
    [shell]='Shell: '
    [ip]='IP: '
    [disk]='Disque: '
)

function usage()
{
    echo -e "Usage: screen-manja [-o] [-c "color"]"
    
    echo -e "\t-o : origin ; not load user config"
    echo -en "\t-c \"color\"\n\n ${#colors[@]} colors available:\n"
    for i in "${!colors[@]}"; do
        echo -ne "${colors[$i]}$i ${colors[null]}"
    done
    #echo -d "\n-d : developer (local system tree)"
    
    echo -ne "\n\n ${#functions[@]} functions available:\n${colors[$color]}"
    for i in "${!functions[*]}"; do
        echo -n "$i "
    done    
    echo -e "${colors[null]}"
    
    exit 0
}

##detection scripts {{{

function detect__manjaro()
{
    local c=''
    local d=''
    local r=''
    local line=''
    while read line  
    do  
        key=${line//=*}
        if [[ ${line//=*} = 'DISTRIB_CODENAME' ]]; then    
            c=${line//*=}
        fi
        if [[ ${line//=*} = 'DISTRIB_DESCRIPTION' ]]; then    
            d=${line//*=}
        fi
        if [[ ${line//=*} = 'DISTRIB_RELEASE' ]]; then    
            r=${line//*=}
        fi
    done < /etc/lsb-release
    echo -n "${d//\"/} $c ${r} $(detect__branch)"
}


# Memory Detection - Begin
function detect__mem() {
    local memfree=0
    local human=1024
    local memtotal=0
    local membuffer=0
    local memcached=0
        while read m
        do
            m=$(echo $(m=${m// /}; echo ${m//kB/}))
            if [[ ${m//:*} = MemTotal ]]; then
                memtotal=${m//*:}
            fi
            if [[ ${m//:*} = MemFree ]]; then
                memfree=${m//*:}
            fi
            if [[ ${m//:*} = Buffers ]]; then
                membuffer=${m//*:}
            fi
            if [[ ${m//:*} = Cached ]]; then
                memcached=${m//*:}
            fi
        done < /proc/meminfo
        local usedmem="$(((($memtotal - $memfree) - $membuffer - $memcached) / $human))"
        local totalmem="$(($memtotal / $human))"
	echo -n "${usedmem}MB / ${totalmem}MB"
}
# Memory Detection - End

function detect__resolution()
{
    echo -n $(xdpyinfo | sed -n 's/.*dim.* \([0-9]*x[0-9]*\) .*/\1/pg' | sed ':a;N;$!ba;s/\n/ /g')
}

function detect__kernel()
{
    echo -n "$(uname -rm)"
}

function detect__host()
{
    echo -n "$USER${colors[null]}@${colors[$color]}$(uname -n)"
}

function detect__ip()
{
    local ip=$(ip addr show |grep -oE "inet (.*)global" | grep -oE " (.*)[/]")
    echo -n "${ip:0:-1}"
}

function detect__packages()
{
	local or=$(detect__orphan)
	[[ "$or" -gt 0 ]] && or="(-$or)"
	local upd=$(detect__maj)
	[[ "$upd" -gt 0 ]] && upd="(+$upd)"
    echo -n "$(pacman -Qq | wc -l) ${colors[null]}$upd $or"
}

function detect__maj()
{
    echo -n $(pacman -Qu | wc -l)
}

function detect__orphan()
{
    echo -n $(pacman -Qdt | wc -l)
}

detect__branch () {
    echo -n $(cat '/etc/pacman-mirrors.conf' | grep -iE '^Branch.*=' | awk -F'=' '{print $2}')
}

##}}} detection scripts

function detect__script()
{
    var="${1^^}"
    ret=$(env | grep -Ei "^$var" | awk -F'=' '{print $2}')
    if [ -n "$ret" ]; then
        echo -n "($1): $ret"
        return 0
    else
        var="${var,,}"
        ret=$(detect__"$var" 2>&1)
        if [ "$?" -ne 0 ]; then
            return 128
        else
            echo -n "$1(): $ret yes script ok in plugins"
        fi
    fi
}

screen_out=''
function detects()
{
    local i=-1
    local fns=( ${@} )
    local fn line
    local nb_blank=0
    local OLD_IFS="$IFS"
    IFS=$'\n'
    for line in ${logo[*]}; do
        let i+=1;
        fn=${fns[$i]}; 
                                                                       
        if [ -n "$fn" ]; then
            #echo "i:$i fn:$fn"
            #[[ -n $(declare -f "detect__$fn") ]] || echo "Function detect__$fn not foundt"
            data="${functions[$fn]}${colors[$color]}$("detect__$fn" 2>&1)${colors[null]}"
            if [[ "$?" -ne 0 ]]; then
                #echo "error $fn :$? : $data"
                data=$("detect__script" "$fn" )
                let nb_blank+=1
            else
                nb_blank=0
            fi
        else
            data=''
            let nb_blank+=1
        fi
        [ "$nb_blank" -gt 1 ] && return 0
        screen_out="$screen_out${colors[$color]} $line${colors[null]}  $data\n"
    done
    IFS=$OLD_IFS
}

function writeln()
{
    echo -e "$screen_out"
}

function set_dirs()
{
    DIRS[package]="$pkgname"
    local path_conf="$HOME/.config/$pkgname"
    [ -d $path_conf ] || mkdir "$path_conf"
    DIRS[local]=$path_conf
    DIRS[conf]="/etc/$pkgname"
    DIRS[lib]="/usr/lib/$pkgname"
    DIRS[doc]="/usr/share/doc/$pkgname"
    
    if [ "$1" == "developer" ]; then
        DIRS[conf]=".${DIRS[conf]}"
        DIRS[lib]=".${DIRS[lib]}"
        DIRS[doc]=".${DIRS[doc]}"
    fi
}

main()
{
    set_dirs "$developer"

    # load infos function (screenFetch)
    file="${DIRS[lib]}/detect"
    [[ -r "$file" ]] && source "$file"
    [[ -r "$file" ]] || echo "$file not found"

    # load user functions
    file="${DIRS[local]}/plugins"
    if [[ -r "$file" ]]; then
        source "$file"
    else
        file="${DIRS[lib]}/plugins"
        [[ -r "$file" ]] && source "$file"
    fi    
    
    # load items to write
    local items=""
    local file="${DIRS[local]}/items.conf"
    if [[ -r "$file" ]] && [ "$conf_default" != true ]; then
        items=$(cat "$file" | grep -Ev "^#")
    else
        items=$(cat "${DIRS[conf]}/items.conf" | grep -Ev "^#")
    fi

    detects "$items"
    writeln
}


if [ "${BASH_SOURCE[0]}" != "$0" ]; then
    export -f search_arch
    export -f search_aur
else
    if [ "$1" == '-h' ] || [ "$1" == '--help' ]; then
        set_dirs
        # load user functions
        file="${DIRS[local]}/plugins"
        if [[ -r "$file" ]]; then
            source "$file"
        else
            file="${DIRS[lib]}/plugins"
            [[ -r "$file" ]] && source "$file"
        fi   
        usage
        exit 0
    fi
    while getopts "c:do" flags; do
	case $flags in
            c) color=$OPTARG;;
            d) developer="developer" ;;
            o) conf_default=true ;;
	esac
    done

    main "$@"
    exit 0
fi
